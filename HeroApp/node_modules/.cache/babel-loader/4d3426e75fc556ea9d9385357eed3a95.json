{"ast":null,"code":"var _jsxFileName = \"/home/matheus/\\xC1rea de Trabalho/Projetos/appMasters/processo-seletivo-app-masters/HeroApp/src/components/GameScreen.jsx\";\nimport React, { Component } from 'react';\nimport api from '../services/api';\nimport axios from 'axios'; //Reacstrap\n\nimport { Button, Spinner } from 'reactstrap'; //Ant design\n\nimport { Card, Row, Col } from 'antd'; //Styled Components \n\nimport { Item, SubItem } from '../styles/syles'; //MAterial Ui\n\nimport { Grid } from '@material-ui/core';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert'; //Material Ui Icons\n\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nconst {\n  Meta\n} = Card;\nlet buttons;\nconst numCards = 10;\nconst Snack = {\n  message: '',\n  color: '',\n  icon: null\n};\n\nclass GameScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.numAleatorio = range => {\n      return Math.floor(Math.random() * range); //Como o vetor de heroi tem tamanho 500 , pego un numero aleatorio de 0 a 499\n    };\n\n    this.verifyName = e => {\n      //Se o botão foi clickado Adiciono 1 a meus cards visitado\n      this.state.numCards = this.state.numCards + 1;\n\n      if (this.state.pickedHeroe.name === e.target.value) {\n        Snack.message = \"Parabéns , você Acertou o nome do héroi\";\n        Snack.color = \"success\";\n        Snack.icon = CheckIcon;\n        this.setState({\n          points: this.state.points + 20,\n          sucessesses: this.state.sucessesses + 1\n        });\n      } else {\n        Snack.message = \"Você errou o nome do héroi !!!\";\n        Snack.color = \"warning\";\n        Snack.icon = ErrorIcon;\n        this.setState({\n          errors: this.state.errors + 1\n        });\n      }\n\n      this.setState({\n        heroLoaded: false,\n        pickedHeroe: null\n      });\n      this.loadingSnackBar(Snack);\n    };\n\n    this.selectHeroes = () => {\n      let vetHerois = [],\n          pickedHero;\n      let numSorteado = this.numAleatorio(this.state.heroeList.length);\n      var i = 0;\n      console.log('num sorteado  ', numSorteado);\n\n      while (i < 3) {\n        vetHerois.push(this.state.heroeList[numSorteado]);\n        numSorteado = this.numAleatorio(500);\n        i++;\n      }\n\n      return vetHerois;\n    };\n\n    this.state = {\n      snackBarColor: '',\n      snackBarMessage: '',\n      snackbarIcon: null,\n      snackBarOpen: false,\n      numCards: 0,\n      //Contar quantos numeros de cards ja foram exibidos\n      heroLoaded: false,\n      //Controlar se o heroi esta carregado ou não \n      heroeList: null,\n      //Lista contendo todos os herois recebidos da api\n      VisitedHeroes: [],\n      //Vetor com os herois ja visitados para evitir duplicatas\n      ActualHeroes: [],\n      //\n      pickedHeroe: null,\n      points: 0,\n      sucessesses: 0,\n      errors: 0,\n      maxHeroes: 5,\n      choices: 0\n    };\n  }\n\n  Alert(props) {\n    return React.createElement(MuiAlert, Object.assign({\n      elevation: 6,\n      variant: \"filled\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n  loadingSnackBar(snack) {\n    //Função para carregar a snack bar falando se usuario errou ou acertou o héroi\n    this.setState({\n      snackBarColor: snack.color,\n      snackBarMessage: snack.message,\n      snackbarIcon: snack.icon,\n      snackBarOpen: true\n    });\n    setTimeout(function () {\n      this.setState({\n        snackBarOpen: false\n      });\n    }.bind(this), 1500);\n  }\n\n  componentDidMount() {\n    api.get(\"/all.json\").then(res => this.setState({\n      heroeList: res.data\n    })).catch(error => alert('erro de comunicação com o servidor ' + error));\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.ActualHeroes !== this.state.ActualHeroes && this.state.heroeList !== null) {\n      let actualHeros = this.selectHeroes();\n    }\n  }\n\n  render() {\n    if (this.state.heroeList !== null && this.state.heroLoaded === false) {\n      this.state.ActualHeroes = [];\n      let heroes = this.selectHeroes();\n      heroes.map(hero => this.state.ActualHeroes.push(hero));\n      this.state.ActualHeroes.concat(this.selectHeroes());\n\n      if (this.state.ActualHeroes !== null) {\n        //Sorteio um indice para o heroi escolhido  , e guardo esse indíce\n        // para  posteriormente deletar o heroi da minha lista de herois\n        var indiceEscolhido = this.numAleatorio(this.state.ActualHeroes.length);\n        this.setState({\n          pickedHeroe: this.state.ActualHeroes[indiceEscolhido],\n          heroLoaded: true\n        });\n\n        if (this.state.pickedHeroe) {\n          let indiceDoEscolhido = this.state.heroeList.find(hero => hero === this.state.pickedHeroe).id;\n          console.log('id do escolhido ', indiceDoEscolhido);\n        } //Logo que escolhi um heroi deleto ele da minha lista de herois para evitar duplicatas\n\n\n        this.state.heroeList.splice(indiceEscolhido, 1);\n        console.log('tamanho da listinha ', this.state.heroeList.length);\n        console.log('heroe lsit perdeu 1', this.state.heroeList);\n      }\n\n      console.log('vetor de herois ', this.state.heroeList);\n      console.log('pickado ', this.state.pickedHeroe);\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'whitesmoke',\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 1,\n      justify: \"space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xl: 4,\n      stlye: {\n        backgroundColor: \"blue ! important\"\n      },\n      xs: \"auto\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \" Pontuacao : \", this.state.points, \" \"), React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Acertos : \", this.state.sucessesses, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), \"Errors : \", this.state.errors)), React.createElement(Grid, {\n      item: true,\n      className: \"mt-3 mb-2\",\n      spacing: 0,\n      xl: 4,\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.pickedHeroe ? React.createElement(Card, {\n      hoverable: true,\n      style: {\n        width: 300,\n        backgroundColor: 'whitesmoke',\n        marginTop: \"5%\"\n      },\n      cover: React.createElement(\"img\", {\n        alt: \"example\",\n        style: {\n          borderRadius: '15px 15px 15px 15px'\n        },\n        className: \"img-fluid\",\n        src: this.state.pickedHeroe.images.md,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Meta, {\n      title: \"\",\n      description: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, this.state.ActualHeroes ? this.state.ActualHeroes.map(heroSelected => React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"mt-1\",\n      onClick: this.verifyName,\n      value: heroSelected.name,\n      outline: true,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, heroSelected.name, \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }))) : React.createElement(Spinner, {\n      style: {\n        marginLeft: \"25%\",\n        marginTop: '25%',\n        width: '3rem',\n        height: '3rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }))) : React.createElement(Spinner, {\n      style: {\n        marginLeft: \"25%\",\n        marginTop: '25%',\n        width: '3rem',\n        height: '3rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      className: \"mt-5\",\n      item: true,\n      xl: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Tempo Restante :\"), React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Cards Restantes : \", numCards - this.state.numCards))), React.createElement(Snackbar, {\n      place: \"bc\" //color={this.state.snackBarColor}\n      //icon={this.state.snackBarIcon}\n      //message={this.state.snackBarMessage}\n      ,\n      open: this.state.snackBarOpen,\n      closeNotification: () => this.setState({\n        snackBarOpen: false\n      }),\n      close: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(MuiAlert, {\n      elevation: 6,\n      variant: \"filled\",\n      severity: this.state.snackBarColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.state.snackBarMessage)));\n  }\n\n}\n\nexport default GameScreen;","map":{"version":3,"sources":["/home/matheus/Área de Trabalho/Projetos/appMasters/processo-seletivo-app-masters/HeroApp/src/components/GameScreen.jsx"],"names":["React","Component","api","axios","Button","Spinner","Card","Row","Col","Item","SubItem","Grid","Snackbar","MuiAlert","CheckIcon","ErrorIcon","Meta","buttons","numCards","Snack","message","color","icon","GameScreen","constructor","props","numAleatorio","range","Math","floor","random","verifyName","e","state","pickedHeroe","name","target","value","setState","points","sucessesses","errors","heroLoaded","loadingSnackBar","selectHeroes","vetHerois","pickedHero","numSorteado","heroeList","length","i","console","log","push","snackBarColor","snackBarMessage","snackbarIcon","snackBarOpen","VisitedHeroes","ActualHeroes","maxHeroes","choices","Alert","snack","setTimeout","bind","componentDidMount","get","then","res","data","catch","error","alert","componentDidUpdate","prevState","actualHeros","render","heroes","map","hero","concat","indiceEscolhido","indiceDoEscolhido","find","id","splice","backgroundColor","height","width","marginTop","borderRadius","images","md","heroSelected","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport api from '../services/api'\nimport axios from 'axios'\n\n\n//Reacstrap\nimport { Button, Spinner } from 'reactstrap'\n\n\n//Ant design\nimport { Card, Row, Col } from 'antd';\n\n//Styled Components \nimport { Item, SubItem } from '../styles/syles'\n\n//MAterial Ui\nimport { Grid } from '@material-ui/core'\nimport { Snackbar } from '@material-ui/core';\n\nimport MuiAlert from '@material-ui/lab/Alert';\n//Material Ui Icons\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\n\n\nconst { Meta } = Card;\n\nlet buttons;\nconst numCards = 10;\n\nconst Snack = {\n    message: '',\n    color: '',\n    icon: null\n}\n\nclass GameScreen extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            snackBarColor: '',\n            snackBarMessage: '',\n            snackbarIcon: null,\n            snackBarOpen: false,\n            numCards: 0, //Contar quantos numeros de cards ja foram exibidos\n            heroLoaded: false, //Controlar se o heroi esta carregado ou não \n            heroeList: null, //Lista contendo todos os herois recebidos da api\n            VisitedHeroes: [], //Vetor com os herois ja visitados para evitir duplicatas\n            ActualHeroes: [], //\n            pickedHeroe: null,\n            points: 0,\n            sucessesses: 0,\n            errors: 0,\n            maxHeroes: 5,\n            choices: 0,\n\n        }\n    }\n\n    Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    loadingSnackBar(snack) { //Função para carregar a snack bar falando se usuario errou ou acertou o héroi\n        this.setState({\n            snackBarColor: snack.color,\n            snackBarMessage: snack.message,\n            snackbarIcon: snack.icon,\n            snackBarOpen: true\n        });\n        setTimeout(\n            function () {\n                this.setState({ snackBarOpen: false });\n            }.bind(this),\n            1500\n        );\n    }\n\n    numAleatorio = (range) => {\n        return Math.floor(Math.random() * range) //Como o vetor de heroi tem tamanho 500 , pego un numero aleatorio de 0 a 499\n    }\n\n    componentDidMount() {\n        api.get(\"/all.json\")\n            .then(res => (\n                (\n                    this.setState({\n                        heroeList: res.data\n                    })\n                ))\n            ).catch(error => alert('erro de comunicação com o servidor ' + error))\n    }\n    componentDidUpdate(prevState) {\n\n        if (prevState.ActualHeroes !== this.state.ActualHeroes && this.state.heroeList !== null) {\n            let actualHeros = this.selectHeroes()\n\n        }\n    }\n\n    verifyName = (e) => {\n\n        //Se o botão foi clickado Adiciono 1 a meus cards visitado\n        this.state.numCards = this.state.numCards + 1\n\n        if (this.state.pickedHeroe.name === e.target.value) {\n            Snack.message = \"Parabéns , você Acertou o nome do héroi\"\n            Snack.color = \"success\"\n            Snack.icon = CheckIcon\n\n            this.setState({ points: this.state.points + 20, sucessesses: this.state.sucessesses + 1 })\n        } else {\n            Snack.message = \"Você errou o nome do héroi !!!\"\n            Snack.color = \"warning\"\n            Snack.icon = ErrorIcon\n\n            this.setState({ errors: this.state.errors + 1 })\n\n        }\n        this.setState({ heroLoaded: false, pickedHeroe: null })\n        this.loadingSnackBar(Snack)\n    }\n    selectHeroes = () => {\n        let vetHerois = [], pickedHero\n        let numSorteado = this.numAleatorio(this.state.heroeList.length)\n        var i = 0;\n        console.log('num sorteado  ', numSorteado)\n        while (i < 3) {\n            vetHerois.push(this.state.heroeList[numSorteado])\n            numSorteado = this.numAleatorio(500)\n            i++\n        }\n\n\n        return vetHerois\n    }\n\n    render() {\n\n        if (this.state.heroeList !== null && this.state.heroLoaded === false) {\n            this.state.ActualHeroes = []\n            let heroes = this.selectHeroes()\n            heroes.map(hero => (\n                this.state.ActualHeroes.push(hero)\n            ))\n            this.state.ActualHeroes.concat(this.selectHeroes())\n\n\n            if (this.state.ActualHeroes !== null) {\n                //Sorteio um indice para o heroi escolhido  , e guardo esse indíce\n                // para  posteriormente deletar o heroi da minha lista de herois\n                var indiceEscolhido = this.numAleatorio(this.state.ActualHeroes.length)\n                this.setState({ pickedHeroe: this.state.ActualHeroes[indiceEscolhido], heroLoaded: true })\n\n\n\n                if (this.state.pickedHeroe) {\n                    let indiceDoEscolhido = this.state.heroeList.find(hero => hero === this.state.pickedHeroe).id\n                    console.log('id do escolhido ' , indiceDoEscolhido)\n                }\n\n                //Logo que escolhi um heroi deleto ele da minha lista de herois para evitar duplicatas\n\n                this.state.heroeList.splice(indiceEscolhido, 1)\n                console.log('tamanho da listinha ', this.state.heroeList.length)\n\n                console.log('heroe lsit perdeu 1', this.state.heroeList)\n\n\n\n            }\n            console.log('vetor de herois ', this.state.heroeList)\n            console.log('pickado ', this.state.pickedHeroe)\n        }\n        return (\n            <div style={{ backgroundColor: 'whitesmoke', height: \"100%\" }}>\n                <Grid\n\n                    container spacing={1}\n                    justify=\"space-around\"\n                >\n\n                    <Grid item xl={4}\n                        stlye={{ backgroundColor: \"blue ! important\" }}\n                        xs=\"auto\"\n                        spacing={2}\n\n                    >\n                        <Item> Pontuacao : {this.state.points} </Item>\n\n                        <SubItem>\n\n                            Acertos : {this.state.sucessesses}\n                            <br />\n                            Errors : {this.state.errors}\n\n                        </SubItem>\n\n\n                    </Grid>\n                    <Grid item\n                        className=\"mt-3 mb-2\"\n                        spacing={0} xl={4} xs={8} >\n                        {this.state.pickedHeroe ? <Card\n                            hoverable\n                            style={{ width: 300, backgroundColor: 'whitesmoke', marginTop: \"5%\" }}\n                            cover={<img alt=\"example\" style={{ borderRadius: '15px 15px 15px 15px' }} className=\"img-fluid\" src={this.state.pickedHeroe.images.md} />}\n                        >\n\n                            <Meta title=\"\" description=\"\" />\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"center\"\n                                alignItems=\"center\">\n                                {this.state.ActualHeroes ? this.state.ActualHeroes.map(heroSelected => (\n                                    <Grid\n                                        fluid\n                                    >\n                                        <Button className=\"mt-1\" onClick={this.verifyName} value={heroSelected.name} outline color=\"primary\">{heroSelected.name} </Button>\n                                        <br />\n                                    </Grid>\n\n                                )) : <Spinner style={{ marginLeft: \"25%\", marginTop: '25%', width: '3rem', height: '3rem' }} />}\n                            </Grid>\n\n                        </Card> : <Spinner style={{ marginLeft: \"25%\", marginTop: '25%', width: '3rem', height: '3rem' }} />\n\n                        }\n                    </Grid>\n                    <Grid\n                        className=\"mt-5\"\n                        item xl={2}\n                    >\n                        <SubItem>\n                            Tempo Restante :\n                            </SubItem>\n                        <SubItem>\n                            Cards Restantes : {numCards - this.state.numCards}\n                        </SubItem>\n                    </Grid>\n                </Grid>\n\n                <Snackbar\n                    place=\"bc\"\n                    //color={this.state.snackBarColor}\n                    //icon={this.state.snackBarIcon}\n                    //message={this.state.snackBarMessage}\n                    open={this.state.snackBarOpen}\n                    closeNotification={() => this.setState({ snackBarOpen: false })}\n                    close\n                >\n                    <MuiAlert elevation={6} variant=\"filled\" severity={this.state.snackBarColor}>\n                        {this.state.snackBarMessage}\n                    </MuiAlert>\n\n                </Snackbar>\n\n            </div>\n        )\n    }\n}\n\nexport default GameScreen"]},"metadata":{},"sourceType":"module"}