{"ast":null,"code":"var _jsxFileName = \"/home/matheus/\\xC1rea de Trabalho/Projetos/appMasters/processo-seletivo-app-masters/HeroApp/src/components/GameScreen.jsx\";\nimport React, { Component } from 'react';\nimport api from '../services/api';\nimport axios from 'axios'; //Components\n\nimport DialogStatistics from './DialogStatistics'; //Reacstrap\n\nimport { Button, Spinner } from 'reactstrap'; //Ant design\n\nimport { Card, Row, Col } from 'antd'; //Styled Components \n\nimport { Item, SubItem, DivCard } from '../styles/syles'; //MAterial Ui\n\nimport { Grid } from '@material-ui/core';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert'; //Material Ui Icons\n\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nconst {\n  Meta\n} = Card;\nlet buttons;\nconst numCards = 4;\nconst Snack = {\n  message: '',\n  color: '',\n  icon: null\n};\n\nclass GameScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.numAleatorio = range => {\n      return Math.floor(Math.random() * range); //Como o vetor de heroi tem tamanho 500 , pego un numero aleatorio de 0 a 499\n    };\n\n    this.verifyName = e => {\n      //Se o botão foi clickado Adiciono 1 a meus cards visitado\n      this.state.numCards = this.state.numCards + 1;\n\n      if (this.state.numCards !== numCards) {\n        if (this.state.pickedHeroe.name === e.target.value) {\n          Snack.message = \"Você Acertou!\";\n          Snack.color = \"success\";\n          Snack.icon = CheckIcon;\n          this.setState({\n            points: this.state.points + 20,\n            sucessesses: this.state.sucessesses + 1\n          });\n        } else {\n          Snack.message = \"Você errou!\";\n          Snack.color = \"warning\";\n          Snack.icon = ErrorIcon;\n          this.setState({\n            errors: this.state.errors + 1\n          });\n        }\n\n        this.setState({\n          heroLoaded: false,\n          pickedHeroe: null\n        });\n        this.loadingSnackBar(Snack);\n      } else {\n        this.setState({\n          openStatistics: true\n        });\n      }\n    };\n\n    this.selectHeroes = () => {\n      let numSorteado = this.numAleatorio(this.state.heroeList.length);\n      let heroiSorteado = this.state.heroeList[numSorteado]; //Ja que escolhi o sorteado deleto ele da minha lista para evitar duplicatas\n\n      this.state.heroeList.splice(numSorteado, 1); //Deletei o heroi do meu vetor de herois\n\n      return heroiSorteado;\n    };\n\n    this.state = {\n      openStatistics: false,\n      snackBarColor: '',\n      snackBarMessage: '',\n      snackbarIcon: null,\n      snackBarOpen: false,\n      numCards: 0,\n      //Contar quantos numeros de cards ja foram exibidos\n      heroLoaded: false,\n      //Controlar se o heroi esta carregado ou não \n      heroeList: null,\n      //Lista contendo todos os herois recebidos da api\n      VisitedHeroes: [],\n      //Vetor com os herois ja visitados para evitir duplicatas\n      ActualHeroes: [],\n      //\n      pickedHeroe: null,\n      points: 0,\n      sucessesses: 0,\n      errors: 0,\n      maxHeroes: 5,\n      choices: 0\n    };\n  }\n\n  Alert(props) {\n    return React.createElement(MuiAlert, Object.assign({\n      elevation: 6,\n      variant: \"filled\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n  loadingSnackBar(snack) {\n    //Função para carregar a snack bar falando se usuario errou ou acertou o héroi\n    this.setState({\n      snackBarColor: snack.color,\n      snackBarMessage: snack.message,\n      snackbarIcon: snack.icon,\n      snackBarOpen: true\n    });\n    setTimeout(function () {\n      this.setState({\n        snackBarOpen: false\n      });\n    }.bind(this), 1500);\n  }\n\n  componentDidMount() {\n    api.get(\"/all.json\").then(res => this.setState({\n      heroeList: res.data\n    })).catch(error => alert('erro de comunicação com o servidor ' + error));\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.ActualHeroes !== this.state.ActualHeroes && this.state.heroeList !== null) {\n      let actualHeros = this.selectHeroes();\n    }\n  }\n\n  render() {\n    if (this.state.heroeList !== null && this.state.heroLoaded === false) {\n      this.state.ActualHeroes = [];\n      let pickedHero = this.selectHeroes(); // Pego o heroi escolhido atraves da funcão auxiliar\n\n      this.setState({\n        pickedHeroe: pickedHero,\n        heroLoaded: true\n      });\n      let random = this.numAleatorio(3); //Escolho um numero aleatorio para o heroi certo , para a posição do botao certo não ser o mesmo toda vez\n\n      for (var i = 0; i < 3; i++) {\n        if (i === random) {\n          this.state.ActualHeroes.push(pickedHero);\n        } else {\n          this.state.ActualHeroes.push(this.state.heroeList[this.numAleatorio(this.state.heroeList.length)]);\n        }\n      }\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'whitesmoke',\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(DialogStatistics, {\n      open: this.state.openStatistics,\n      won: this.state.win,\n      errors: this.state.errosPercentage,\n      sucessess: this.state.sucessessesPercentage,\n      points: this.state.points,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      justify: \"space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xl: 4,\n      xs: \"auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-xl-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \" Pontuacao : \", this.state.points, \" \"), React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Acertos : \", this.state.sucessesses, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), \"Errors : \", this.state.errors))), React.createElement(Grid, {\n      item: true,\n      className: \"mt-3 mb-2\",\n      xl: 4,\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(DivCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.state.pickedHeroe ? React.createElement(Card, {\n      hoverable: true,\n      style: {\n        width: 300,\n        backgroundColor: 'whitesmoke',\n        marginTop: \"5%\"\n      },\n      cover: React.createElement(\"img\", {\n        alt: \"example\",\n        style: {\n          width: '350px',\n          borderRadius: '15px 15px 15px 15px'\n        },\n        className: \"img-fluid\",\n        src: this.state.pickedHeroe.images.md,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Meta, {\n      title: \"\",\n      description: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.state.ActualHeroes ? this.state.ActualHeroes.map(heroSelected => React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"mt-1\",\n      onClick: this.verifyName,\n      value: heroSelected.name,\n      outline: true,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, heroSelected.name, \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }))) : React.createElement(Spinner, {\n      style: {\n        marginLeft: \"25%\",\n        marginTop: '25%',\n        width: '3rem',\n        height: '3rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }))) : React.createElement(Spinner, {\n      style: {\n        marginLeft: \"25%\",\n        marginTop: '25%',\n        width: '3rem',\n        height: '3rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      className: \"mt-5\",\n      item: true,\n      xl: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-xl-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Tempo Restante :\"), React.createElement(SubItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Cards Restantes : \", numCards - this.state.numCards)))), React.createElement(Snackbar, {\n      place: \"bc\",\n      open: this.state.snackBarOpen,\n      closeNotification: () => this.setState({\n        snackBarOpen: false\n      }),\n      close: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(MuiAlert, {\n      elevation: 6,\n      variant: \"filled\",\n      severity: this.state.snackBarColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, this.state.snackBarMessage)));\n  }\n\n}\n\nexport default GameScreen;","map":{"version":3,"sources":["/home/matheus/Área de Trabalho/Projetos/appMasters/processo-seletivo-app-masters/HeroApp/src/components/GameScreen.jsx"],"names":["React","Component","api","axios","DialogStatistics","Button","Spinner","Card","Row","Col","Item","SubItem","DivCard","Grid","Snackbar","MuiAlert","CheckIcon","ErrorIcon","Meta","buttons","numCards","Snack","message","color","icon","GameScreen","constructor","props","numAleatorio","range","Math","floor","random","verifyName","e","state","pickedHeroe","name","target","value","setState","points","sucessesses","errors","heroLoaded","loadingSnackBar","openStatistics","selectHeroes","numSorteado","heroeList","length","heroiSorteado","splice","snackBarColor","snackBarMessage","snackbarIcon","snackBarOpen","VisitedHeroes","ActualHeroes","maxHeroes","choices","Alert","snack","setTimeout","bind","componentDidMount","get","then","res","data","catch","error","alert","componentDidUpdate","prevState","actualHeros","render","pickedHero","i","push","backgroundColor","height","win","errosPercentage","sucessessesPercentage","width","marginTop","borderRadius","images","md","map","heroSelected","marginLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport api from '../services/api'\nimport axios from 'axios'\n\n\n//Components\nimport DialogStatistics from './DialogStatistics'\n\n//Reacstrap\nimport { Button, Spinner } from 'reactstrap'\n\n\n//Ant design\nimport { Card, Row, Col } from 'antd';\n\n//Styled Components \nimport { Item, SubItem, DivCard } from '../styles/syles'\n\n//MAterial Ui\nimport { Grid } from '@material-ui/core'\nimport { Snackbar } from '@material-ui/core';\n\nimport MuiAlert from '@material-ui/lab/Alert';\n//Material Ui Icons\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\n\n\nconst { Meta } = Card;\n\nlet buttons;\nconst numCards = 4;\n\nconst Snack = {\n    message: '',\n    color: '',\n    icon: null\n}\n\nclass GameScreen extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            openStatistics : false,\n            snackBarColor: '',\n            snackBarMessage: '',\n            snackbarIcon: null,\n            snackBarOpen: false,\n            numCards: 0, //Contar quantos numeros de cards ja foram exibidos\n            heroLoaded: false, //Controlar se o heroi esta carregado ou não \n            heroeList: null, //Lista contendo todos os herois recebidos da api\n            VisitedHeroes: [], //Vetor com os herois ja visitados para evitir duplicatas\n            ActualHeroes: [], //\n            pickedHeroe: null,\n            points: 0,\n            sucessesses: 0,\n            errors: 0,\n            maxHeroes: 5,\n            choices: 0,\n\n        }\n    }\n\n    Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    loadingSnackBar(snack) { //Função para carregar a snack bar falando se usuario errou ou acertou o héroi\n        this.setState({\n            snackBarColor: snack.color,\n            snackBarMessage: snack.message,\n            snackbarIcon: snack.icon,\n            snackBarOpen: true\n        });\n        setTimeout(\n            function () {\n                this.setState({ snackBarOpen: false });\n            }.bind(this),\n            1500\n        );\n    }\n\n    numAleatorio = (range) => {\n        return Math.floor(Math.random() * range) //Como o vetor de heroi tem tamanho 500 , pego un numero aleatorio de 0 a 499\n    }\n\n    componentDidMount() {\n        api.get(\"/all.json\")\n            .then(res => (\n                (\n                    this.setState({\n                        heroeList: res.data\n                    })\n                ))\n            ).catch(error => alert('erro de comunicação com o servidor ' + error))\n    }\n    componentDidUpdate(prevState) {\n\n        if (prevState.ActualHeroes !== this.state.ActualHeroes && this.state.heroeList !== null) {\n            let actualHeros = this.selectHeroes()\n\n        }\n    }\n\n    verifyName = (e) => {\n\n        //Se o botão foi clickado Adiciono 1 a meus cards visitado\n        this.state.numCards = this.state.numCards + 1\n        if (this.state.numCards !== numCards) {\n            if (this.state.pickedHeroe.name === e.target.value) {\n                Snack.message = \"Você Acertou!\"\n                Snack.color = \"success\"\n                Snack.icon = CheckIcon\n\n                this.setState({ points: this.state.points + 20, sucessesses: this.state.sucessesses + 1 })\n            } else {\n                Snack.message = \"Você errou!\"\n                Snack.color = \"warning\"\n                Snack.icon = ErrorIcon\n\n                this.setState({ errors: this.state.errors + 1 })\n\n            }\n            this.setState({ heroLoaded: false, pickedHeroe: null })\n            this.loadingSnackBar(Snack)\n        }else{\n            this.setState({openStatistics : true})\n        }\n    }\n    selectHeroes = () => {\n\n        let numSorteado = this.numAleatorio(this.state.heroeList.length)\n        let heroiSorteado = this.state.heroeList[numSorteado] //Ja que escolhi o sorteado deleto ele da minha lista para evitar duplicatas\n        this.state.heroeList.splice(numSorteado, 1) //Deletei o heroi do meu vetor de herois\n\n        return heroiSorteado\n    }\n\n    render() {\n\n        if (this.state.heroeList !== null && this.state.heroLoaded === false) {\n            this.state.ActualHeroes = []\n\n            let pickedHero = this.selectHeroes() // Pego o heroi escolhido atraves da funcão auxiliar\n\n            this.setState({ pickedHeroe: pickedHero, heroLoaded: true })\n\n\n\n            let random = this.numAleatorio(3) //Escolho um numero aleatorio para o heroi certo , para a posição do botao certo não ser o mesmo toda vez\n            for (var i = 0; i < 3; i++) {\n                if (i === random) {\n                    this.state.ActualHeroes.push(pickedHero)\n                } else {\n                    this.state.ActualHeroes.push(this.state.heroeList[this.numAleatorio(this.state.heroeList.length)])\n                }\n            }\n        }\n        return (\n           \n            <div style={{ backgroundColor: 'whitesmoke', height: \"100%\" }}>\n                 <DialogStatistics open= {this.state.openStatistics} won = {this.state.win} errors ={this.state.errosPercentage} sucessess = {this.state.sucessessesPercentage}  points={this.state.points} />\n                <Grid\n\n                    container\n                    justify=\"space-around\"\n                >\n\n                    <Grid item xl={4}\n                        xs=\"auto\"\n\n                    >\n                        <div className=\"offset-xl-2\">\n                            <Item> Pontuacao : {this.state.points} </Item>\n\n                            <SubItem>\n\n                                Acertos : {this.state.sucessesses}\n                                <br />\n                                Errors : {this.state.errors}\n\n                            </SubItem>\n                        </div>\n\n                    </Grid>\n                    <Grid item\n                        className=\"mt-3 mb-2\"\n                        xl={4}\n                        xs={8}\n                    >\n                        <DivCard>\n                            {this.state.pickedHeroe ? <Card\n                                hoverable\n                                style={{ width: 300, backgroundColor: 'whitesmoke', marginTop: \"5%\" }}\n                                cover={<img alt=\"example\" style={{ width: '350px', borderRadius: '15px 15px 15px 15px' }} className=\"img-fluid\" src={this.state.pickedHeroe.images.md} />}\n                            >\n\n                                <Meta title=\"\" description=\"\" />\n                                <Grid\n                                    container\n                                    direction=\"column\"\n                                    justify=\"center\"\n                                    alignItems=\"center\">\n                                    {this.state.ActualHeroes ? this.state.ActualHeroes.map(heroSelected => (\n                                        <Grid\n                                            fluid\n                                        >\n                                            <Button className=\"mt-1\" onClick={this.verifyName} value={heroSelected.name} outline color=\"primary\">{heroSelected.name} </Button>\n                                            <br />\n                                        </Grid>\n\n                                    )) : <Spinner style={{ marginLeft: \"25%\", marginTop: '25%', width: '3rem', height: '3rem' }} />}\n                                </Grid>\n\n                            </Card> : <Spinner style={{ marginLeft: \"25%\", marginTop: '25%', width: '3rem', height: '3rem' }} />\n\n                            }\n                        </DivCard>\n\n                    </Grid>\n                    <Grid\n                        className=\"mt-5\"\n                        item xl={4}\n                    >\n                        <div className=\"offset-xl-5\">\n                            <SubItem>\n                                Tempo Restante :\n                            </SubItem>\n                            <SubItem>\n                                Cards Restantes : {numCards - this.state.numCards}\n                            </SubItem>\n                        </div>\n                    </Grid>\n                </Grid>\n\n                <Snackbar\n                    place=\"bc\"\n                    open={this.state.snackBarOpen}\n                    closeNotification={() => this.setState({ snackBarOpen: false })}\n                    close\n                >\n                    <MuiAlert elevation={6} variant=\"filled\" severity={this.state.snackBarColor}>\n                        {this.state.snackBarMessage}\n                    </MuiAlert>\n\n                </Snackbar>\n\n            </div>\n        )\n    }\n}\n\nexport default GameScreen"]},"metadata":{},"sourceType":"module"}